// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - integrates with Clerk
model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Organization relationships
  organizationMemberships OrganizationMember[]
  ownedOrganizations      Organization[]       @relation("OrganizationOwner")
  sentInvitations         OrganizationInvitation[]
  
  // Direct relationships (for backward compatibility)
  tools        Tool[]
  usageRecords UsageRecord[]
  apiKeys      ApiKey[]

  @@map("users")
}

// Organization model (renamed from Company for clarity)
model Organization {
  id          String           @id @default(cuid())
  name        String
  slug        String           @unique
  description String?
  logoUrl     String?
  website     String?
  industry    String?
  size        OrganizationSize @default(SMALL)
  domain      String?
  
  // Settings
  customBranding Boolean @default(false)
  brandColors    Json?   // Store custom brand colors
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Owner relationship - references User.id (internal ID)
  ownerId String
  owner   User   @relation("OrganizationOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  // Relationships
  members       OrganizationMember[]
  tools         Tool[]
  subscriptions Subscription[]
  integrations  Integration[]
  usageRecords  UsageRecord[]
  apiKeys       ApiKey[]
  invitations   OrganizationInvitation[]

  @@map("organizations")
}

enum OrganizationSize {
  SMALL      // 1-10 employees
  MEDIUM     // 11-50 employees
  LARGE      // 51-200 employees
  ENTERPRISE // 200+ employees
}

// Organization membership model
model OrganizationMember {
  id        String                  @id @default(cuid())
  role      OrganizationMemberRole  @default(MEMBER)
  status    MembershipStatus        @default(ACTIVE)
  joinedAt  DateTime                @default(now())
  updatedAt DateTime                @updatedAt

  // Relationships - userId references User.clerkId (Clerk ID)
  userId         String
  user           User         @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("organization_members")
}

enum OrganizationMemberRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum MembershipStatus {
  ACTIVE
  INACTIVE
  PENDING
}

// Organization invitations
model OrganizationInvitation {
  id        String                  @id @default(cuid())
  email     String
  role      OrganizationMemberRole  @default(MEMBER)
  token     String                  @unique
  expiresAt DateTime
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt

  // Relationships
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedById    String
  invitedBy      User         @relation(fields: [invitedById], references: [id], onDelete: Cascade)

  @@unique([organizationId, email])
  @@map("organization_invitations")
}

// Tool model - the custom business tools created by users
model Tool {
  id          String     @id @default(cuid())
  name        String
  description String?
  slug        String
  status      ToolStatus @default(DRAFT)
  category    String?
  
  // Tool configuration
  config      Json? // Stores the tool configuration, fields, workflows, etc.
  schema      Json? // Stores the data schema for the tool
  ui          Json? // Stores UI configuration and styling
  
  // V0 Integration fields
  v0Code      String?    // Generated code from v0
  previewUrl  String?    // Preview URL from v0
  publishedUrl String?   // Published tool URL
  generatedAt DateTime?  // When v0 generation completed
  publishedAt DateTime?  // When tool was published
  
  // Requirements and generation
  requirements     String?           // Original user requirements
  v0Prompt         String?           // Processed prompt sent to v0
  generationStatus GenerationStatus  @default(pending)
  generationError  String?           // Error message if generation failed
  analysisData     String?           // AI analysis results
  generatedCode    String?           // Generated code
  v0GenerationId   String?           // v0 generation ID
  
  // Metadata
  isPublic    Boolean  @default(false)
  url         String?  // Custom URL for the tool
  version     String   @default("1.0.0")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  createdById    String
  creator        User         @relation(fields: [createdById], references: [clerkId], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Related models
  versions      ToolVersion[]
  usageRecords  UsageRecord[]
  integrations  ToolIntegration[]
  analytics     ToolAnalytics[]

  @@unique([organizationId, slug])
  @@map("tools")
}

enum ToolStatus {
  DRAFT
  GENERATING
  GENERATED
  PUBLISHED
  ARCHIVED
  ERROR
}

enum GenerationStatus {
  pending
  analyzing
  designing
  generating
  finalizing
  completed
  error
}

// Tool versions for version control
model ToolVersion {
  id          String   @id @default(cuid())
  version     String
  config      Json?
  schema      Json?
  ui          Json?
  v0Code      String?
  changelog   String?
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relationships
  toolId String
  tool   Tool   @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@unique([toolId, version])
  @@map("tool_versions")
}

// Template model
model Template {
  id          String   @id @default(cuid())
  name        String
  description String
  category    String
  tags        String[]
  config      Json?
  schema      Json?
  ui          Json?
  preview     Json?
  previewUrl  String?  // Preview image URL
  
  // Template metadata
  isPublic    Boolean  @default(true)
  rating      Float?
  downloads   Int      @default(0)
  difficulty  String   @default("Easy") // Easy, Medium, Hard
  setupTime   String   @default("5 min")
  features    String[] // List of features
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("templates")
}

// Integration model
model Integration {
  id          String            @id @default(cuid())
  name        String
  type        IntegrationType
  provider    String
  config      Json?
  credentials Json?             // Encrypted credentials
  status      IntegrationStatus @default(PENDING)
  lastSyncAt  DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relationships
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Related models
  toolIntegrations ToolIntegration[]
  logs             IntegrationLog[]

  @@unique([organizationId, provider])
  @@map("integrations")
}

enum IntegrationType {
  CRM
  DATABASE
  PAYMENT
  STORAGE
  COMMUNICATION
  PRODUCTIVITY
  ANALYTICS
}

enum IntegrationStatus {
  PENDING
  CONNECTED
  DISCONNECTED
  ERROR
}

// Tool-specific integrations
model ToolIntegration {
  id        String   @id @default(cuid())
  config    Json?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  toolId        String
  tool          Tool        @relation(fields: [toolId], references: [id], onDelete: Cascade)
  integrationId String
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@unique([toolId, integrationId])
  @@map("tool_integrations")
}

// Integration logs
model IntegrationLog {
  id        String    @id @default(cuid())
  level     LogLevel
  message   String
  data      Json?
  createdAt DateTime  @default(now())

  // Relationships
  integrationId String
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@map("integration_logs")
}

enum LogLevel {
  INFO
  WARN
  ERROR
}

// Subscription model for billing
model Subscription {
  id                     String             @id @default(cuid())
  plan                   SubscriptionPlan
  status                 SubscriptionStatus @default(ACTIVE)
  stripeCustomerId       String?
  stripeSubscriptionId   String?
  stripePriceId          String?
  currentPeriodStart     DateTime
  currentPeriodEnd       DateTime
  cancelAtPeriodEnd      Boolean            @default(false)
  trialEndsAt            DateTime?
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  // Usage limits
  toolsLimit    Int @default(1)
  membersLimit  Int @default(3)
  storageLimit  Int @default(1000) // MB
  apiCallsLimit Int @default(1000) // per month

  // Relationships
  organizationId String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Related models
  invoices Invoice[]

  @@map("subscriptions")
}

enum SubscriptionPlan {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
  TRIALING
}

// Invoice model
model Invoice {
  id              String        @id @default(cuid())
  stripeInvoiceId String?       @unique
  amount          Int           // Amount in cents
  currency        String        @default("usd")
  status          InvoiceStatus
  invoiceUrl      String?       // Stripe invoice URL
  pdfUrl          String?       // PDF download URL
  paidAt          DateTime?
  dueDate         DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relationships
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}

// Usage tracking model
model UsageRecord {
  id        String    @id @default(cuid())
  type      UsageType
  count     Int       @default(1)
  metadata  Json?
  createdAt DateTime  @default(now())

  // Relationships
  userId         String?
  user           User?        @relation(fields: [userId], references: [clerkId], onDelete: SetNull)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  toolId         String?
  tool           Tool?        @relation(fields: [toolId], references: [id], onDelete: SetNull)

  @@map("usage_records")
}

enum UsageType {
  TOOL_CREATED
  TOOL_PUBLISHED
  TOOL_VIEW
  TOOL_INTERACTION
  API_CALL
  INTEGRATION_SYNC
  EXPORT_DATA
  MEMBER_INVITED
  TEMPLATE_USED
}

// Tool analytics model
model ToolAnalytics {
  id           String   @id @default(cuid())
  date         DateTime
  views        Int      @default(0)
  interactions Int      @default(0)
  uniqueUsers  Int      @default(0)
  createdAt    DateTime @default(now())

  // Relationships
  toolId String
  tool   Tool   @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@unique([toolId, date])
  @@map("tool_analytics")
}

// API Keys model
model ApiKey {
  id          String       @id @default(cuid())
  name        String
  key         String       @unique
  permissions String[]     // Array of permissions
  status      ApiKeyStatus @default(ACTIVE)
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relationships
  userId         String
  user           User         @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

enum ApiKeyStatus {
  ACTIVE
  INACTIVE
  REVOKED
}

// Audit log for tracking changes
model AuditLog {
  id        String   @id @default(cuid())
  action    String   // CREATE, UPDATE, DELETE, etc.
  resource  String   // tool, organization, user, etc.
  resourceId String
  userId    String?
  metadata  Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}
